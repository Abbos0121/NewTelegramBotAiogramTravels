import logging
import sqlalchemy as sa
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton, ContentTypes
from aiogram.contrib.fsm_storage.memory import MemoryStorage

logging.basicConfig(level=logging.INFO)

bot = Bot(token="6487732130:AAGV4SiRUEnnVDVykWiSkAHG46Foizh5Mjk")

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

DATABASE_URL = "postgresql://aiogrambot:postgres@localhost:5432/aiogrambot"
engine = sa.create_engine(DATABASE_URL)

metadata = sa.MetaData()

users = sa.Table(
    'users', metadata,
    sa.Column('id', sa.Integer, primary_key=True),
    sa.Column('user_id', sa.Integer),
    sa.Column('name', sa.String),
    sa.Column('destination', sa.String),
)


class UserFormStates:
    WaitingForName = 'waiting_for_name'
    WaitingForDestination = 'waiting_for_destination'
    WaitingForPhone = 'waiting_phone'
    WaitingForAge = 'waiting_age'
    WaitingForDays = 'waiting_days'


@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    link_travel = "https://traveler.fly.dev"
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç —Å–∞–π—Ç–∞ <a href='{link_travel}'>TRAVELER</a>",
                         parse_mode="html")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è?")

    await state.set_state(UserFormStates.WaitingForName)


@dp.message_handler(state=UserFormStates.WaitingForName)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await message.answer("–û—Ç–ª–∏—á–Ω–æ‚úÖ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç.")
    await state.set_state(UserFormStates.WaitingForAge)


@dp.message_handler(state=UserFormStates.WaitingForAge)
async def process_age(message: types.Message, state: FSMContext):

    try:
        async with state.proxy() as data:
            data['age'] = int(message.text)
    except ValueError:
        await message.answer('üôÇ–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.')
        return

    user_data = await state.get_data()
    await message.answer(f"üôÇ–°–ø–∞—Å–∏–±–æ {user_data['name']}", parse_mode=ParseMode.MARKDOWN)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("üì≤–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
    markup.add(button)
    await message.answer("üì≤–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", reply_markup=markup)
    await state.set_state(UserFormStates.WaitingForPhone)


@dp.message_handler(state=UserFormStates.WaitingForPhone, content_types=ContentTypes.CONTACT)
async def phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.contact.phone_number

    await message.reply(f"–û—Ç–ª–∏—á–Ω–æ‚úÖ! –ö—É–¥–∞ —Ö–æ—Ç–∏—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å?.")

    await state.set_state(UserFormStates.WaitingForDestination)


@dp.message_handler(state=UserFormStates.WaitingForDestination)
async def phone_number(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['days'] = message.text

    await message.reply(f"–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π?")
    await state.set_state(UserFormStates.WaitingForDays)


@dp.message_handler(state=UserFormStates.WaitingForDays)
async def process_day(message: types.Message, state: FSMContext):
    try:
        async with state.proxy() as data:
            data['age'] = int(message.text)
    except ValueError:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–∏—à–∏—Ç–µ —á–∏—Å–ª–∞–º–∏')
        return
    link_travel = "https://traveler.fly.dev"
    await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä.")
    await message.answer(f"–ò–ª–∏ –±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –º–µ—Å—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç <a href='{link_travel}'>TRAVELER</a>", parse_mode="html")

if __name__ == "__main__":
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)
